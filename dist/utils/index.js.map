{"version":3,"sources":["utils/parseStipend.ts","utils/index.ts"],"names":[],"mappings":"ACGa,AD6Eb,aC7Ea,AD6Eb,IC7Ea,EAAA,CD6Eb,KC7Ea,KAAA,KD6Eb,QAAA,IC7Ea,SAAA,AD6Eb,CAAA,EC7Ea,KD6Eb,EC7Ea,EDeb,CCfa,EAAA,CDeP,EAAe,QCfR,CDeS,CCfT,CAAA,CDiBP,GADJ,IChBW,IAAA,ADgBH,IAAI,GChBD,ADiBS,WAAhB,EACK,EClBE,IDkBF,CACL,GCnBO,IDmBC,EACR,KAAM,ECpBC,CAAA,MDqBP,CCrBO,IAFb,IAAA,EAAA,EAAA,ODuB0B,CCvB1B,CDwBM,eAAe,GCtBR,AD0BP,GAAgB,KC1BT,YAAc,KD0BrB,EACK,EC3BiB,GACpB,CD0BG,CACL,EC3BE,EAAc,EAAK,CD2Bb,EACR,KAAM,MC5B6B,ED6BnC,oBAAoB,EACpB,SC9BoE,MD8BrD,GAIb,GClC8E,CDoC9E,EAA2B,CAC/B,GCpCI,EAAc,EAAA,ADiCA,QCjCa,CDiCJ,ECtBtB,ADsBmC,IAIxC,GCpCF,EDoCQ,MCpCA,EDqCN,ECrCU,GAEuB,CACjC,KAAM,GACN,MDiCoB,ECjCX,ADkCT,GCjCA,QAAS,EACT,EDgCe,GAGb,GAAA,CCnCQ,CDmCI,IClCd,KDkCuB,QClCT,KACd,CDiCsC,CACtC,MClCS,EDkCD,IAAI,kBACZ,EAAY,eAAgB,EACtB,IAAA,EAAe,EAAY,QAAQ,KACzC,EAAc,EAAY,MAAM,EAAG,GAWjC,GAPA,EAAY,SAAS,UACvB,QAAQ,IAAI,iBACZ,EAAY,KAAO,UACnB,EAAc,EAAY,MAAM,GAAI,IAIlC,EAAY,SAAS,KAAM,CAC7B,QAAQ,IAAI,cACN,IAAA,EAAgB,EAAY,QAAQ,KACpC,EAAa,EAAY,MAAM,EAAgB,GACrD,EAAY,UAAY,SAAS,EAAY,IAWxC,OARH,EAAY,SAAS,UACvB,QAAQ,IAAI,WACZ,EAAY,KAAO,WACV,EAAY,SAAS,UAC9B,QAAQ,IAAI,UACZ,EAAY,KAAO,UAGd,GAGT,QAAA,QAAe","file":"index.js","sourceRoot":"../src","sourcesContent":["import {\n  StipendData,\n} from '../types';\n\n/**\n * @description\n * these are the following cases for the input value that are expected:\n * 1. Unpaid\n * 2. Lumpsum stipend\n * 3. Monthly stipend\n * 4. Weekly stipend\n * 5. Performance Based\n * 6. Periodic stipend with incentives\n *\n * @returns { StipendData } stipend\n * @param stipendText the trimmed text of the stipend data html td\n */\n/* eslint-disable no-param-reassign */\nconst parseStipend = (stipendText: string): StipendData => {\n  console.log(stipendText);\n  if (stipendText === 'Unpaid') {\n    return {\n      amount: 0,\n      type: 'UNPAID',\n      isPerformanceBased: false,\n      hasIncentives: false,\n    };\n  }\n\n  if (stipendText === 'Performance Based') {\n    return {\n      amount: 0,\n      type: 'OTHER',\n      isPerformanceBased: true,\n      hasIncentives: false,\n    };\n  }\n\n  const baseStipend = parseInt(stipendText, 10);\n\n  const stipendData: StipendData = {\n    amount: baseStipend,\n    type: 'OTHER',\n    isPerformanceBased: false,\n    hasIncentives: false,\n  };\n\n  if (stipendText.includes('Incentives')) {\n    console.log('has incentives');\n    stipendData.hasIncentives = true;\n    const plusLocation = stipendText.indexOf('+');\n    stipendText = stipendText.slice(0, plusLocation);\n  }\n\n  // we check this before checking range because Lump-Sum also contains a -\n  if (stipendText.includes('Lump')) {\n    console.log('is a lump sum');\n    stipendData.type = 'LUMPSUM';\n    stipendText = stipendText.slice(0, -9);\n  }\n\n  // is a range and not an absolute amount\n  if (stipendText.includes('-')) {\n    console.log('is a range');\n    const minusLocation = stipendText.indexOf('-');\n    const maxStipend = stipendText.slice(minusLocation + 1);\n    stipendData.maxAmount = parseInt(maxStipend, 10);\n  }\n\n  if (stipendText.includes('Month')) {\n    console.log('monthly');\n    stipendData.type = 'MONTHLY';\n  } else if (stipendText.includes('Week')) {\n    console.log('weekly');\n    stipendData.type = 'WEEKLY';\n  }\n\n  return stipendData;\n};\n\nexport default parseStipend;\n","import { InternshipData } from '../types';\nimport parseStipend from './parseStipend';\n\nexport const extractData = (html: Element): InternshipData => {\n  const stipendText = html.querySelector('.stipend_container_table_cell').textContent.trim();\n  const stipendData = parseStipend(stipendText);\n  console.log(stipendData);\n\n  const internData: InternshipData = {\n    name: '',\n    startup: '',\n    stipend: stipendData,\n    duration: null,\n    durationType: null,\n    content: html,\n  };\n  return internData;\n};\n"]}