{"version":3,"sources":["utils/parseStipend.ts","utils/parseDuration.ts","utils/index.ts","dom/createFilterContainer.ts","dom/createSampleCheckbox.ts","dom/index.ts","content.ts"],"names":[],"mappings":"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","file":"content.js","sourceRoot":"../src","sourcesContent":["import {\n  StipendData,\n} from '../types';\n\n/**\n * @description\n * these are the following cases for the input value that are expected:\n * 1. Unpaid\n * 2. Lumpsum stipend\n * 3. Monthly stipend\n * 4. Weekly stipend\n * 5. Performance Based\n * 6. Periodic stipend with incentives\n *\n * @returns { StipendData } stipend\n * @param stipendText the trimmed text of the stipend data html td\n */\n/* eslint-disable no-param-reassign */\nconst parseStipend = (stipendText: string): StipendData => {\n  // console.log(stipendText);\n  if (stipendText === 'Unpaid') {\n    return {\n      amount: 0,\n      type: 'UNPAID',\n      isPerformanceBased: false,\n      hasIncentives: false,\n    };\n  }\n\n  if (stipendText === 'Performance Based') {\n    return {\n      amount: 0,\n      type: 'OTHER',\n      isPerformanceBased: true,\n      hasIncentives: false,\n    };\n  }\n\n  const baseStipend = parseInt(stipendText, 10);\n\n  const stipendData: StipendData = {\n    amount: baseStipend,\n    type: 'OTHER',\n    isPerformanceBased: false,\n    hasIncentives: false,\n  };\n\n  if (stipendText.includes('Incentives')) {\n    // console.log('has incentives');\n    stipendData.hasIncentives = true;\n    const plusLocation = stipendText.indexOf('+');\n    stipendText = stipendText.slice(0, plusLocation);\n  }\n\n  // we check this before checking range because Lump-Sum also contains a -\n  if (stipendText.includes('Lump')) {\n    // console.log('is a lump sum');\n    stipendData.type = 'LUMPSUM';\n    stipendText = stipendText.slice(0, -9);\n  }\n\n  // is a range and not an absolute amount\n  if (stipendText.includes('-')) {\n    // console.log('is a range');\n    const minusLocation = stipendText.indexOf('-');\n    const maxStipend = stipendText.slice(minusLocation + 1);\n    stipendData.maxAmount = parseInt(maxStipend, 10);\n  }\n\n  if (stipendText.includes('Month')) {\n    // console.log('monthly');\n    stipendData.type = 'MONTHLY';\n  } else if (stipendText.includes('Week')) {\n    // console.log('weekly');\n    stipendData.type = 'WEEKLY';\n  }\n\n  return stipendData;\n};\n\nexport default parseStipend;\n","import {\n  DurationData,\n} from '../types';\n\nconst parseDuration = (durationText: string): DurationData => {\n  const durationTime = parseInt(durationText, 10);\n  if (durationText.includes('Month')) {\n    return {\n      time: durationTime,\n      type: 'MONTH',\n    };\n  }\n\n  return {\n    time: durationTime,\n    type: 'WEEK',\n  };\n};\n\nexport default parseDuration;\n","import { InternshipData } from '../types';\nimport parseStipend from './parseStipend';\nimport parseDuration from './parseDuration';\n\nexport const extractData = (html: Element): InternshipData => {\n  const stipendText = html.querySelector('.stipend_container_table_cell').textContent.trim();\n  const stipendData = parseStipend(stipendText);\n  // console.log(stipendData);\n\n  const durationText = html.querySelectorAll('td')[1].textContent.trim();\n  const durationData = parseDuration(durationText);\n  // console.log(durationText);\n\n  const internData: InternshipData = {\n    stipend: stipendData,\n    duration: durationData,\n    content: html,\n  };\n  // console.log(internData);\n  return internData;\n};\n","const createFilterContainer = (): HTMLDivElement => {\n  const divElement = document.createElement('div');\n  divElement.classList.add('arvind');\n  divElement.innerHTML = 'hello';\n  return divElement;\n};\n\nexport default createFilterContainer;\n","const createCheckbox = (labelText: string, eventListener: EventListener): HTMLLabelElement => {\n  const labelElement = document.createElement('label');\n  labelElement.classList.add('control-label');\n  labelElement.innerText = labelText;\n\n  const checkboxElement = document.createElement('input');\n  checkboxElement.setAttribute('type', 'checkbox');\n  checkboxElement.addEventListener('change', eventListener, false);\n\n  labelElement.appendChild(checkboxElement);\n  return labelElement;\n};\n\nexport default createCheckbox;\n","import createFilterContainer from './createFilterContainer';\nimport createCheckbox from './createSampleCheckbox';\n\nexport {\n  createFilterContainer,\n  createCheckbox,\n};\n","import { InternshipData } from './types';\nimport { extractData } from './utils';\nimport { createFilterContainer, createCheckbox } from './dom';\n\nconst sampleEventListener = (event: Event): void => {\n  console.log(event);\n};\n\nconst internshipDivArrayPath = '#internship_list_container > .individual_internship';\nconst internshipDivArray: Array<Element> = Array.from(document.querySelectorAll(internshipDivArrayPath));\n\nconst internshipsArray: Array<InternshipData> = internshipDivArray.map((internship) => extractData(internship));\nconsole.log(internshipsArray);\n\nconst formContainerPath = '#form-container';\nconst formContainer = document.querySelector(formContainerPath);\n\nconst sampleDiv = createFilterContainer();\nconst sampleCheckbox = createCheckbox('sample', sampleEventListener);\nsampleDiv.appendChild(sampleCheckbox);\nformContainer.prepend(sampleDiv);\n"]}